package {{package}};

import {{invokerPackage}}.ApiException;
import {{invokerPackage}}.ApiClient;
import {{invokerPackage}}.ApiRequest;
import {{invokerPackage}}.ApiResponse;
import {{invokerPackage}}.Configuration;
import {{modelPackage}}.*;
import {{invokerPackage}}.Pair;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.util.Map;

{{#imports}}import {{import}};
{{/imports}}

{{#operation}}
public class {{classname}} implements ApiRequest {
	{{#allParams}}
	private {{{dataType}}} {{paramName}};
	public {{{dataType}}} get{{paramName}}() {
		return this.{{paramName}};
	}
	public void set{{paramName}}({{{dataType}}} {{paramName}}) {
		this.{{paramName}} = {{paramName}};
	}

	{{/allParams}}

	private Map<String, String> customHeaders = new HashMap<>();

    public Map<String, String> getCustomHeaders() {
        return customHeaders;
    }

    public void setCustomHeaders(Map<String, String> customHeaders) {
        this.customHeaders = customHeaders;
    }

    @Override
    public Object getBody() {
		return {{#bodyParam}}this.{{paramName}}{{/bodyParam}}{{^bodyParam}}null{{/bodyParam}};
    }

    @Override
    public List<Pair> getQueryParams() {
		List<Pair> params = new ArrayList<>();
{{#queryParams}}		params.add(new Pair("{{paramName}}", this.{{paramName}} == null ? "" : this.{{paramName}}.toString()));
		{{/queryParams}}
		return params;
    }

    @Override
    public List<Pair> getPathParams() {
		List<Pair> params = new ArrayList<>();
{{#pathParams}}		params.add(new Pair("{{paramName}}", this.{{paramName}} == null ? "" : this.{{paramName}}.toString()));
		{{/pathParams}}
		return params;
    }

    @Override
    public Map<String, Object> getFormParams() {
        Map<String, Object> params = new HashMap<>();
{{#formParams}}		params.put("{{paramName}}", this.{{paramName}});
		{{/formParams}}
		return params;
    }

    @Override
    public Map<String, String> getHeaderParams() {
        Map<String, String> params = new HashMap<>();
{{#formParams}}		params.put("{{paramName}}", this.{{paramName}} == null ? "" : this.{{paramName}}.toString());
		{{/formParams}}
		params.putAll(customHeaders);
		return params;
    }

	public static Builder builder() {
		return new Builder();
	}

	public static class Builder {
		private final {{classname}} request;

		private Builder() {
			request = new {{classname}} ();
		}

		{{#allParams}}
		public Builder with{{paramName}}({{{dataType}}} {{paramName}}) {
			request.set{{paramName}}({{paramName}});
			return this;
		}
		{{/allParams}}

		public Builder withRequiredParams({{#requiredParams}}{{^-first}}, {{/-first}}{{{dataType}}} {{paramName}}{{/requiredParams}}) {
{{#requiredParams}}			request.set{{paramName}}({{paramName}});
			{{/requiredParams}}
			return this;
		}

		public {{classname}} build() {
			return request;
		}
	}
}
{{/operation}}