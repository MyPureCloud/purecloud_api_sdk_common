package {{package}};

import {{invokerPackage}}.ApiException;
import {{invokerPackage}}.ApiClient;
import {{invokerPackage}}.ApiRequest;
import {{invokerPackage}}.ApiRequestBuilder;
import {{invokerPackage}}.ApiResponse;
import {{invokerPackage}}.Configuration;
import {{modelPackage}}.*;
import {{invokerPackage}}.Pair;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Pattern;

{{#imports}}import {{import}};
{{/imports}}

{{#operation}}
public class {{classname}} {
    private static final Pattern JSON_MIME_PATTERN = Pattern.compile("(?i)application\\/json(;.*)?");
    private static final String[] AUTH_NAMES = new String[] { };

	{{#allParams}}
	private {{{dataType}}} {{paramName}};
	public {{{dataType}}} get{{paramTitle}}() {
		return this.{{paramName}};
	}

	public void set{{paramTitle}}({{{dataType}}} {{paramName}}) {
		this.{{paramName}} = {{paramName}};
	}

	public {{classname}} with{{paramTitle}}({{{dataType}}} {{paramName}}) {
	    this.set{{paramTitle}}({{paramName}});
	    return this;
	}

	{{/allParams}}
	private final Map<String, String> customHeaders = new HashMap<>();
    public Map<String, String> getCustomHeaders() {
        return this.customHeaders;
    }

    public void setCustomHeaders(Map<String, String> customHeaders) {
        this.customHeaders.clear();
        this.customHeaders.putAll(customHeaders);
    }

    public void addCustomHeader(String name, String value) {
        this.customHeaders.put(name, value);
    }

    public {{classname}} withCustomHeader(String name, String value) {
        this.addCustomHeader(name, value);
        return this;
    }

    public ApiRequest<{{#bodyParam}}{{{dataType}}}{{/bodyParam}}{{^bodyParam}}Void{{/bodyParam}}> withHttpInfo() throws ApiException {
        {{#allParams}}{{#required}}
        // verify the required parameter '{{paramName}}' is set
        if (this.{{paramName}} == null) {
            throw new ApiException(400, "Missing the required parameter '{{paramName}}' when building request for {{classname}}.");
        }
        {{/required}}{{/allParams}}

        return ApiRequestBuilder.create("{{httpMethod}}", "{{path}}"){{#pathParams}}
                .withPathParameter("{{{baseName}}}", {{paramName}})
        {{/pathParams}}{{#queryParams}}
                .withQueryParameters("{{{baseName}}}", "{{#collectionFormat}}{{{collectionFormat}}}{{/collectionFormat}}", {{paramName}})
        {{/queryParams}}{{#formParams}}
                .withFormParameter("{{{baseName}}}", {{paramName}})
        {{/formParams}}{{#headerParams}}
                .withHeaderParameter("{{{baseName}}}", {{paramName}})
        {{/headerParams}}{{#bodyParam}}
                .withBody({{paramName}})
        {{/bodyParam}}
                .withCustomHeaders(customHeaders)
                .withContentTypes({{#consumes}}"{{mediaType}}"{{#hasMore}}, {{/hasMore}}{{/consumes}})
                .withAccepts({{#produces}}"{{mediaType}}"{{#hasMore}}, {{/hasMore}}{{/produces}})
                .withAuthNames({{#authMethods}}"{{name}}"{{#hasMore}}, {{/hasMore}}{{/authMethods}})
                .build();
    }

	public static Builder builder() {
		return new Builder();
	}

	public static class Builder {
		private final {{classname}} request;

		private Builder() {
			request = new {{classname}}();
		}

		{{#allParams}}
		public Builder with{{paramTitle}}({{{dataType}}} {{paramName}}) {
			request.set{{paramTitle}}({{paramName}});
			return this;
		}
		{{/allParams}}

		public Builder withRequiredParams({{#requiredParams}}{{^-first}}, {{/-first}}{{{dataType}}} {{paramName}}{{/requiredParams}}) {
{{#requiredParams}}			request.set{{paramName}}({{paramName}});
			{{/requiredParams}}
			return this;
		}

		public {{classname}} build() {
			return request;
		}
	}
}
{{/operation}}